// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package github.com/egavrev/project_tracker

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type ProjectType string

const (
	ProjectTypeOvertime        ProjectType = "overtime"
	ProjectTypeTimeandmaterial ProjectType = "timeandmaterial"
	ProjectTypeFixprice        ProjectType = "fixprice"
)

func (e *ProjectType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProjectType(s)
	case string:
		*e = ProjectType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProjectType: %T", src)
	}
	return nil
}

type NullProjectType struct {
	ProjectType ProjectType
	Valid       bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProjectType) Scan(value interface{}) error {
	if value == nil {
		ns.ProjectType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProjectType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProjectType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.ProjectType, nil
}

type CostCalc struct {
	ID         int32
	ProjectID  sql.NullInt32
	ExecutorID sql.NullInt32
	UnitPrice  sql.NullInt32
	TotalUnits sql.NullInt32
}

type CostCalcInvoice struct {
	ID                int32
	CostCalcID        sql.NullInt32
	Correction        sql.NullInt32
	CorrectionComment sql.NullString
	TotalSum          sql.NullInt32
	PreiodFrom        sql.NullTime
	PeriodTo          sql.NullTime
}

type Executer struct {
	ID        int32
	ProjectID sql.NullInt32
	Profile   sql.NullString
	Stack     sql.NullString
}

type Notificator struct {
	ID                int32
	CostCalcInvoiceID sql.NullInt32
	Message           sql.NullString
	Confrimed         sql.NullBool
}

type Project struct {
	ID          int32
	ProjectName NullProjectType
	Type        sql.NullInt32
	PreiodFrom  sql.NullTime
	PreiodTo    sql.NullTime
}

type User struct {
	ID       int32
	FullName sql.NullString
	Password sql.NullString
}
